{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","Api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/images/share.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","reverse","map","positive","death","date","dateChecked","fetchCountries","countries","name","Charts","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","Text","CountryPicker","handleCountryChange","fetchedCountries","setfetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","share","alt","Chart","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55708715.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3RyNq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1-ani\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3Qwrv\",\"card\":\"Cards_card__1x55Z\",\"infected\":\"Cards_infected__1KQq3\",\"recovered\":\"Cards_recovered__33Om-\",\"deaths\":\"Cards_deaths__3oxPg\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from './Cards.module.css';\r\nimport CountUp from \"react-countup\";\r\nimport cx from 'classnames';\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return \"loading...\";\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> infected   </Typography>\r\n\r\n                        <Typography variant='h5'> <CountUp\r\n                            start={0}\r\n                            end={confirmed.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                        />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of covid19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>   <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom> recovered </Typography>\r\n\r\n                \r\n                            <Typography variant='h5'> <CountUp\r\n                            start={0}\r\n                            end={recovered.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                        />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recovery of covid19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>   <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>deaths </Typography>\r\n\r\n                  \r\n                        <Typography variant='h5'> <CountUp\r\n                            start={0}\r\n                            end={deaths.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                        />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths from covid19</Typography>\r\n                    </CardContent>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","\r\nimport axios from \"axios\";\r\n\r\n\r\nconst url=' https://covid19.mathdro.id/api';\r\n\r\nconst fetchData = async (country)=>{\r\n  let changeableUrl = url;\r\n  if(country){\r\n    changeableUrl=`${url}/countries/${country}`;\r\n  }\r\n    try {\r\n        const { data:{confirmed,recovered,deaths,lastUpdate} } = await axios.get(changeableUrl);\r\n \r\n          \r\n        return { confirmed,recovered,deaths,lastUpdate}\r\n    } catch (error){\r\n      console.log(error);\r\n\r\n    }\r\n}\r\n\r\n// const fetchDailyDaTa = async ()=>{\r\n //   try {   \r\n   //     const {data} = await axios.get(`${ url }/daily`);\r\n  //    const modifiedData =data.map((dailyData)=>({\r\n  //        confirmed : dailyData.confirmed.total,\r\n //         deaths:dailyData.deaths.total,\r\n        //  date : dailyData.reportDate,\r\n//\r\n   //   }));\r\n //     return modifiedData;\r\n//    } catch (error) {\r\n        \r\n//    }\r\n// };\r\n const fetchDailyData = async () => {\r\n    try {\r\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\r\n\r\n      return data.reverse().map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  export const fetchCountries = async ()=>{\r\n    try {\r\n        const {data:{countries}} = await axios.get('https://covid19.mathdro.id/api/countries');\r\n      \r\n        return countries.map((country)=>country.name);\r\n    } catch (error) {\r\n      \r\n    }\r\n  }\r\nexport {fetchData};\r\nexport {fetchDailyData}\r\n\r\n","import React from \"react\";\r\nimport { useEffect,useState } from \"react\";\r\nimport { Line,Bar } from \"react-chartjs-2\";\r\nimport   styles from'./Chart.module.css';\r\nimport {fetchDailyData} from '../../Api';\r\n\r\nconst Charts = ({data:{confirmed,deaths,recovered},country})=>{\r\n    \r\nconst [dailyData,setDailyData] = useState([]);\r\n\r\nuseEffect( ()=>{\r\n    const fetchAPI = async ()=>{\r\n        setDailyData (await fetchDailyData());\r\n    }\r\n    fetchAPI();\r\n},[]);\r\n\r\nconst lineChart=(\r\n   dailyData.length  ? <Line \r\n\r\n    data = {{\r\n      \r\n        labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: 'green',\r\n            \r\n            fill: true,\r\n        },{\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'red',\r\n            fill: true,\r\n        },\r\n            \r\n        ],\r\n    }}\r\n    />: null\r\n\r\n);\r\nconsole.log(confirmed,deaths,recovered);\r\n\r\nconst barChart=(\r\n    confirmed \r\n    ? (\r\n        <Bar\r\n        data ={{\r\n            labels:['infected ','deaths','recovered'],\r\n            datasets:[{\r\n                labels: 'people',\r\n                backgroundColor: ['blue','red','green'\r\n                ],\r\n                data:[confirmed.value,deaths.value,recovered.value ]\r\n            }]\r\n        }}\r\n        options={{\r\n            legend : {display:false},\r\n            title : {display:true,Text:`Current state in ${country}`},\r\n        }}\r\n        />\r\n\r\n    ): null\r\n)\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart    }\r\n        </div>\r\n    )\r\n    }\r\n\r\n    export default Charts;","import React from \"react\";\r\nimport { useState,useEffect } from \"react\";\r\nimport { NativeSelect } from \"@material-ui/core\";\r\nimport { FormControl } from \"@material-ui/core\";\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from \"../../Api\";\r\n\r\nconst CountryPicker = ({handleCountryChange})=>{\r\n    const [fetchedCountries,setfetchedCountries]= useState([]);\r\n    useEffect(()=>{\r\n  \r\n        const fetchAPI = async ()=>{\r\n            setfetchedCountries(await fetchCountries());\r\n    \r\n    }\r\n    fetchAPI();\r\n    },[setfetchedCountries]);\r\nconsole.log(fetchedCountries);\r\n    return (\r\n   \r\n    <FormControl className={styles.FormControl}>   \r\n     <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\r\n            <option value=\"\"> global</option>\r\n            {fetchedCountries.map((country,i) =><option key={i} value={country}> {country} </option>)}\r\n        </NativeSelect>\r\n        </FormControl>\r\n    )\r\n    }\r\n\r\n    export default CountryPicker;","export default __webpack_public_path__ + \"static/media/share.c27c6008.png\";","import React from 'react';\n\nimport Cards from './components/Cards/Cards';\nimport Charts from './components/Chart/Chart';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport styles from './App.module.css';\nimport { fetchData } from './Api';\nimport share from './components/images/share.png';\n\nclass App extends React.Component {\n  state = {\n    data:{},\n    country :'',\n\n  }\n\n async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data: fetchedData});\n\n    //console.log(data)\n  }\n  handleCountryChange = async (country)=>{\n    const fetchedData = await fetchData(country);\n    console.log(fetchedData);\n    this.setState({data: fetchedData,country: country}); \n  }\n  render (){\n    const {data,country} =this.state;\n    return(\n     \n      <div className={styles.container}>\n      <img className={styles.image} src={share} alt='COVID-19'/>\n      <Cards  data={data} />\n      <CountryPicker handleCountryChange={this.handleCountryChange}/>\n      <Charts data={data} country={country}/>\n    \n\n        </div>\n    \n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1fdD-\",\"image\":\"App_image__3Zefb\"};"],"sourceRoot":""}